/*
 * Michael Masenheimer CSC 345 
 * Program #1: Somewhat Simplified Solitaire Encryption Algorithm: Twoâ€“Suit Variant
 * Dr. McCann, Dr. Lynam, Jesse Chen, Moyeen Uddin, due September 18
 * 
 * Description:
 * 
 * This program was written to refresh my java skills. It is a play on a classic solitaire encryption/decryption
 * algorithm using keystreams generated by a half deck of cards. In terms of data structures, only fixed arrays
 * were used since all of the input and output data doesn't necessarily need to be changed. This program
 * uses what is called a "keystream" algorithm, which involves shifting the deck of cards around to generate custom
 * values used in the encryption/decription process for each character in the input and output.
 * 
 * Operations:
 * 
 * This program uses Java version 24, and the input is taken from the terminal in the form of "encryption/decryption.java messages.txt deck.txt"
 * 
 * The encrypt/decrypt 
 */
public class ConvertDeck {

    public static Integer cardToNumber (String card) {

        if (card.equals("JA")) return 27;
        if (card.equals("JB")) return 28;
        
        char suit = card.charAt(card.length() - 1);
        
        String rankStr = card.substring(0, card.length() - 1);
        
        int rank;
        switch (rankStr) {
            case "A": rank = 1; break;
            case "J": rank = 11; break;
            case "Q": rank = 12; break;
            case "K": rank = 13; break;
            default: rank = Integer.parseInt(rankStr); break;
        }
        
        int suitOffset;
        switch (suit) {
            case 'C': suitOffset = 0; break;
            case 'D': suitOffset = 13; break;
            default: suitOffset = 0; break;
        }

        return rank + suitOffset;

    }

    public static Integer[] startConvert (String preDeck) {
        Integer[] result = new Integer[preDeck.split(" ").length];
        
        String[] convertArr = preDeck.split(" ");

        for (int i = 0; i < convertArr.length; i++) {
            result[i] = ConvertDeck.cardToNumber(convertArr[i]);
        }

        return result;
    }
}